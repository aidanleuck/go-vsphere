// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
)

type Job struct {
	JobID       string    `json:"JobID"`
	BranchName  string    `json:"BranchName"`
	BuildNumber int       `json:"BuildNumber"`
	Product     string    `json:"Product"`
	TotalVM     int       `json:"TotalVM"`
	RemainingVM int       `json:"RemainingVM"`
	Status      JobStatus `json:"Status"`
	Priority    int       `json:"Priority"`
}

type JobInput struct {
	BranchName  string `json:"BranchName"`
	BuildNumber int    `json:"BuildNumber"`
	Product     string `json:"Product"`
	TotalVM     int    `json:"TotalVM"`
	Priority    *int   `json:"Priority,omitempty"`
}

type VM struct {
	ID     string    `json:"ID"`
	Name   string    `json:"Name"`
	Labels []*string `json:"Labels"`
	Status VMStatus  `json:"Status"`
}

type JobStatus string

const (
	JobStatusNew                JobStatus = "NEW"
	JobStatusCreating           JobStatus = "CREATING"
	JobStatusNotEnoughResources JobStatus = "NOT_ENOUGH_RESOURCES"
	JobStatusFulfilled          JobStatus = "FULFILLED"
)

var AllJobStatus = []JobStatus{
	JobStatusNew,
	JobStatusCreating,
	JobStatusNotEnoughResources,
	JobStatusFulfilled,
}

func (e JobStatus) IsValid() bool {
	switch e {
	case JobStatusNew, JobStatusCreating, JobStatusNotEnoughResources, JobStatusFulfilled:
		return true
	}
	return false
}

func (e JobStatus) String() string {
	return string(e)
}

func (e *JobStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = JobStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid JobStatus", str)
	}
	return nil
}

func (e JobStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type VMStatus string

const (
	VMStatusNotCreated VMStatus = "NOT_CREATED"
	VMStatusCreated    VMStatus = "CREATED"
)

var AllVMStatus = []VMStatus{
	VMStatusNotCreated,
	VMStatusCreated,
}

func (e VMStatus) IsValid() bool {
	switch e {
	case VMStatusNotCreated, VMStatusCreated:
		return true
	}
	return false
}

func (e VMStatus) String() string {
	return string(e)
}

func (e *VMStatus) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = VMStatus(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid VMStatus", str)
	}
	return nil
}

func (e VMStatus) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
